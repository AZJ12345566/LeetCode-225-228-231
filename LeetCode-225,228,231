class Solution {
/*
  225.用队列实现栈
  请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。
*/
  Queue<Integer> queue1;
  Queue<Integer> queue2;
  public Solution() {
    queue1 = new LinkedList<Integer>();
    queue2 = new LinkedList<Integer>();
  }
  public void push(int x) {
    queue2.offer(x);
    while(!queue1.isEmpty()) {
      queue2.offer(queue1.poll());
    }
    Queue<Integer> temp = queue2;
    queue2 = queue1;
    queue1 = temp;
  }

  public int pop() {
    return queue1.poll();
  }

  public int top() {
    return queue1.peek();
  }

  public boolean empty() {
    return queue1.isEmpty();
  }

/*
  228.汇总区间
  给定一个  无重复元素 的 有序 整数数组 nums 。
  返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表 。也就是说，nums 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 nums 的数字 x 。
*/
  public List<String> summaryRanges(int[] nums) {
    List<String> list = new ArrayList<>();
    int i = 0;
    int n = nums.length;
    while(i < n) {
      int low = i;
      i++;
      while(i < n && nums[i] == nums[i - 1] + 1) {
        i++;
      }
      int high = i - 1;
      StringBuffer temp = new StringBuffer(Integer.toString(nums[low]));
      if(low < high) {
        temp.append("->");
        temp.append(Integer.toString(nums[high]));
      }
      list.add(temp.toString());
    }
    return list;
  }
/*
  231.2的幂
  给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。
  如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。
*/
  public boolean isPowerOfTwo(int n) {
    return n > 0 && (n & (n - 1)) == 0;
  }
}
